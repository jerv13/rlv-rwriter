<?php

namespace DoctrineORMModule\Proxy\__CG__\Rcm\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Language extends \Rcm\Entity\Language implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }

    public function getLanguage()
    {
        $this->__load();
        return parent::getLanguage();
    }

    public function getTwoDigit()
    {
        $this->__load();
        return parent::getTwoDigit();
    }

    public function getThreeDigit()
    {
        $this->__load();
        return parent::getThreeDigit();
    }

    public function getLanguageId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["languageId"];
        }
        $this->__load();
        return parent::getLanguageId();
    }

    public function setLanguageId($languageId)
    {
        $this->__load();
        return parent::setLanguageId($languageId);
    }

    public function getLanguageName()
    {
        $this->__load();
        return parent::getLanguageName();
    }

    public function setLanguageName($languageName)
    {
        $this->__load();
        return parent::setLanguageName($languageName);
    }

    public function getIso6391()
    {
        $this->__load();
        return parent::getIso6391();
    }

    public function setIso6391($iso639_1)
    {
        $this->__load();
        return parent::setIso6391($iso639_1);
    }

    public function getIso6392b()
    {
        $this->__load();
        return parent::getIso6392b();
    }

    public function setIso6392b($iso639_2b)
    {
        $this->__load();
        return parent::setIso6392b($iso639_2b);
    }

    public function getIso6392t()
    {
        $this->__load();
        return parent::getIso6392t();
    }

    public function setIso6392t($iso639_2t)
    {
        $this->__load();
        return parent::setIso6392t($iso639_2t);
    }

    public function getOldWebLanguage()
    {
        $this->__load();
        return parent::getOldWebLanguage();
    }

    public function setOldWebLanguage($language)
    {
        $this->__load();
        return parent::setOldWebLanguage($language);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'languageId', 'languageName', 'iso639_1', 'iso639_2b', 'iso639_2t', 'oldWebLanguage');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}